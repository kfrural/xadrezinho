package gui;

import classes.Peca;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import classes.Tabuleiro;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author kfrural
 */
public class Jogo extends javax.swing.JFrame {
    
     private Tabuleiro tabuleiro;
     private JButton[][] botoes;
     private int origemX = -1;
    private int origemY = -1;

    /**
     * Creates new form Jogo
     */
    public Jogo() {
       tabuleiro = new Tabuleiro();
        botoes = new JButton[8][8];
        inicializarGUI();
    }
    
    private void inicializarGUI() {
        setTitle("Jogo de Xadrez");
        setSize(800, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel painelTabuleiro = new JPanel(new GridLayout(8, 8));
        for (int y = 0; y < 8; y++) {
            for (int x = 0; x < 8; x++) {
                botoes[x][y] = new JButton();
                botoes[x][y].setPreferredSize(new Dimension(100, 100));
                botoes[x][y].setBackground((x + y) % 2 == 0 ? Color.WHITE : Color.GRAY);
                botoes[x][y].addActionListener(new OuvidorBotao(x, y));
                painelTabuleiro.add(botoes[x][y]);
            }
        }
        add(painelTabuleiro, BorderLayout.CENTER);

        atualizarTabuleiro();
    }
    
      private void atualizarTabuleiro() {
        for (int y = 0; y < 8; y++) {
            for (int x = 0; x < 8; x++) {
                Peca peca = tabuleiro.getPeca(x, y);
                if (peca != null) {
                   ImageIcon icon = new ImageIcon(peca.getIconPath());
                botoes[x][y].setIcon(icon);
                } else {
                    botoes[x][y].setText("");
                }
            }
        }
    }
     
private class OuvidorBotao implements ActionListener {
    private int x, y;

    public OuvidorBotao(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (tabuleiro.isVezPecasBrancas()) {
            if (origemX == -1 && origemY == -1) {
                if (tabuleiro.getPeca(x, y) != null) {
                    origemX = x;
                    origemY = y;
                    realcarPosicoesValidas(tabuleiro.getPeca(x, y));
                }
            } else {
                if (tabuleiro.moverPeca(origemX, origemY, x, y)) {
                    ImageIcon icon = new ImageIcon(tabuleiro.getPeca(x, y).getIconPath());
                    botoes[x][y].setIcon(icon);
                    botoes[origemX][origemY].setIcon(null);
                    origemX = -1;
                    origemY = -1;

                    if (tabuleiro.verificarFimDeJogo()) {
                        String mensagem = tabuleiro.isVezPecasBrancas() ? "Jogador Preto" : "Jogador Branco";
                        JOptionPane.showMessageDialog(null, mensagem + " ganhou!", "Fim de Jogo", JOptionPane.INFORMATION_MESSAGE);
                        reiniciarJogo();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Movimento inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
                removerRealcePosicoes();
            }
        } else {
            JOptionPane.showMessageDialog(null, "A vez é do jogador das peças brancas!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void realcarPosicoesValidas(Peca peca) {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (peca.movimentoValido(i, j, tabuleiro.getTabuleiro())) {
                    botoes[i][j].setBackground(Color.GREEN); // Realça as posições válidas com a cor verde
                }
            }
        }
    }

    private void removerRealcePosicoes() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                botoes[i][j].setBackground((i + j) % 2 == 0 ? Color.WHITE : Color.GRAY); // Retorna a cor original
            }
        }
    }
}

   private void reiniciarJogo() {
        tabuleiro = new Tabuleiro();
        atualizarTabuleiro();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
//    public static void main(String[] args) {
//    SwingUtilities.invokeLater(() -> {
//        new Jogo().setVisible(true);
//    });
//}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
